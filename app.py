"""
    Author:         Aaryan Sharma
    Date:           April 5th, 2025
    File:           app.py
    Description:    This file is meant to define the flask app.
"""


from flask import Flask, render_template, request, jsonify
from chatbotBackend import extract_symptoms, match_diseases, get_llm_diagnosis, get_specialization, get_doctors, format_phone

app = Flask(__name__)

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/chat", methods=["POST"])
def chat():
    data = request.json
    user_input = data.get("message", "").strip()
    city = data.get("city", "").strip()
    zipcode = data.get("zipcode", "").strip()

    print("\n" + "=" * 60)
    print(f"User Input: {user_input}")
    symptoms, wrong = extract_symptoms(user_input)

    print("-" * 50)
    print("Extracted Symptoms:", ", ".join(symptoms) if symptoms else "None found.")
    print("Unrecognized Symptoms:", ", ".join(wrong) if wrong else "None")
    print("Total valid symptoms:", len(symptoms))
    print("-" * 50)

    diseases = match_diseases(symptoms)
    llm_result = get_llm_diagnosis(user_input)

    if not diseases and not llm_result:
        print("No diagnoses available for the symptoms.")
    else:
        print("\nPossible Diagnoses:")
        if diseases:
            for idx, d in enumerate(diseases, start=1):
                print("-" * 50)
                print(f"{idx}. Disease: {d['disease']}")
                print(f"   Matched Symptoms: {', '.join(d['matched_symptoms'])}")
                print(f"   Score: {d['score']}")
                specialization = get_specialization(d['disease'])
                print(f"   Specialization: {specialization or 'Not found'}")
            print("-" * 50)

        if llm_result:
            print(f"{len(diseases)+1}. Disease: {llm_result['disease']} (Generated by LLM)")
            print(f"   Specialization: {llm_result['specialization']}")
            print("-" * 50)

    all_specializations = {get_specialization(d['disease']) for d in diseases if get_specialization(d['disease'])}
    if llm_result:
        all_specializations.add(llm_result["specialization"])

    doctor_results = []
    if city or zipcode:
        for spec in all_specializations:
            print(f"\nFetching doctors for specialization: {spec} (City: {city}, ZIP: {zipcode})")
            df = get_doctors(spec, city=city, zipcode=zipcode)
            doctors = []
            if df.empty:
                print("No doctors found in your area.")
            else:
                for _, row in df.iterrows():
                    name = f"{row['LastName']}, {row['FirstName']}"
                    phone = format_phone(row["Phone"])
                    loc = f"{row['City']}, {row['State']} - {row['ZIP'][0:-4]}-{row['ZIP'][-4:]}" if row[
                        'ZIP'] else "Location not available"
                    print(f"{name}\n{phone}\n{row['Facility']} ({loc})")
                    print("-" * 50)

                    doctors.append({
                        "name": name,
                        "phone": phone,
                        "facility": row["Facility"],
                        "location": f"{row['City']}, {row['State']} {row['ZIP'][0:-4]}-{row['ZIP'][-4:]}"
                    })

            doctor_results.append({
                "specialization": spec,
                "doctors": doctors
            })
    else:
        print("\nNo city or ZIP code provided. Skipping doctor recommendations.")

    return jsonify({
        "symptoms": symptoms,
        "unrecognized": wrong,
        "diseases": diseases,
        "llm_result": llm_result,
        "doctors_by_specialization": doctor_results
    })


if __name__ == "__main__":
    app.run(debug=True)


    # Testing:
    #   "I've been feeling really thirsty all the time, needing to pee a lot, constantly hungry, and extremely tired. Also, I sometimes feel a pins and needles sensation in my feet and there's this weird dark patch on my skin. Iâ€™ve even noticed a slight hump forming on my upper back"
